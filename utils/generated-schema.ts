/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/users/day": {
    get: operations["getDay"];
    put: operations["updateDay"];
    post: operations["createUserDay"];
  };
  "/api/v1/users/day/products": {
    put: operations["addProductsToDay"];
  };
  "/api/v1/users/day/product": {
    put: operations["addProductToDay"];
  };
  "/api/v1/product": {
    get: operations["getProductById"];
    put: operations["updateProduct"];
    post: operations["createProduct"];
    delete: operations["deleteProduct"];
  };
  "/api/v1/migrate": {
    put: operations["migrateProducts"];
  };
  "/api/v1/auth/register": {
    post: operations["register"];
  };
  "/api/v1/auth/authenticate": {
    post: operations["authenticate"];
  };
  "/api/v1/users/day/date": {
    get: operations["getDay_1"];
  };
  "/api/v1/user": {
    get: operations["getUserInfo"];
  };
  "/api/v1/product/search": {
    get: operations["searchProducts"];
  };
  "/api/v1/product/all": {
    get: operations["getAllProducts"];
  };
  "/api/v1/auth/refresh": {
    get: operations["refreshToken"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CustomProduct: {
      name: string;
      protein: string;
      carbs: string;
      fat: string;
      sugar: string;
      weight: string;
      calories: string;
      /** Format: int64 */
      originProductId: number;
    };
    UserDay: {
      /** Format: int32 */
      id: number;
      /** Format: date */
      date: string;
      /** Format: int64 */
      userId: number;
      breakfastProducts: components["schemas"]["CustomProduct"][];
      lunchProducts: components["schemas"]["CustomProduct"][];
    };
    Product: {
      /** Format: int64 */
      id: number;
      name: string;
      protein: string;
      carbs: string;
      fat: string;
      sugar: string;
      fitatuId: string;
      calories: string;
      weight: string;
    };
    RegisterRequest: {
      firstname: string;
      lastname: string;
      email: string;
      password: string;
    };
    AuthenticationResponse: {
      token: string;
    };
    AuthenticationRequest: {
      email: string;
      password: string;
    };
    GrantedAuthority: {
      authority: string;
    };
    User: {
      /** Format: int64 */
      id: number;
      lastname: string;
      firstname: string;
      email: string;
      password: string;
      /** @enum {string} */
      role: "USER" | "ADMIN";
      enabled: boolean;
      accountNonExpired: boolean;
      accountNonLocked: boolean;
      credentialsNonExpired: boolean;
      authorities: components["schemas"]["GrantedAuthority"][];
      username: string;
    };
    Pageable: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      sort: string[];
    };
    PageProduct: {
      /** Format: int32 */
      totalPages: number;
      /** Format: int64 */
      totalElements: number;
      /** Format: int32 */
      size: number;
      content: components["schemas"]["Product"][];
      /** Format: int32 */
      number: number;
      sort: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements: number;
      pageable: components["schemas"]["PageableObject"];
      first: boolean;
      last: boolean;
      empty: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset: number;
      sort: components["schemas"]["SortObject"];
      /** Format: int32 */
      pageNumber: number;
      /** Format: int32 */
      pageSize: number;
      paged: boolean;
      unpaged: boolean;
    };
    SortObject: {
      empty: boolean;
      unsorted: boolean;
      sorted: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  getDay: {
    parameters: {
      query: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserDay"];
        };
      };
    };
  };
  updateDay: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDay"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserDay"];
        };
      };
    };
  };
  createUserDay: {
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserDay"];
        };
      };
    };
  };
  addProductsToDay: {
    parameters: {
      query: {
        userDayId: number;
        dayTime: "BREAKFAST" | "LUNCH";
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomProduct"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserDay"];
        };
      };
    };
  };
  addProductToDay: {
    parameters: {
      query: {
        userDayId: number;
        dayTime: "BREAKFAST" | "LUNCH";
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomProduct"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserDay"];
        };
      };
    };
  };
  getProductById: {
    parameters: {
      query: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Product"];
        };
      };
    };
  };
  updateProduct: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Product"];
        };
      };
    };
  };
  createProduct: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Product"];
        };
      };
    };
  };
  deleteProduct: {
    parameters: {
      query: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  migrateProducts: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthenticationResponse"];
        };
      };
    };
  };
  authenticate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthenticationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthenticationResponse"];
        };
      };
    };
  };
  getDay_1: {
    parameters: {
      query: {
        date: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserDay"];
        };
      };
    };
  };
  getUserInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"];
        };
      };
    };
  };
  searchProducts: {
    parameters: {
      query: {
        query: string;
        page: components["schemas"]["Pageable"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageProduct"];
        };
      };
    };
  };
  getAllProducts: {
    parameters: {
      query: {
        page: components["schemas"]["Pageable"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageProduct"];
        };
      };
    };
  };
  refreshToken: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthenticationResponse"];
        };
      };
    };
  };
}
